### 二分查找总结
  本文参考CyC同学的总结，发现其实善于总结，把方法逐个掌握比分散法力要好。所以从今天开始分专题练习。
  二分法核心在于通过每次定位可能出=出现的区间缩小搜索范围，从而降低时间复杂度。
  这类问题一般是有序数列搜索问题，需要注意循环条件，边界，返回值等。
  
#####  1. 传统的二分查找也称为折半查找，每次都能将查找区间减半，用于有序序列的快速查找，时间复杂度O(logN)。

          public int binarySearch(int[] nums, int key) {
            int l = 0, h = nums.length - 1;
            while (l <= h) {//注意符号
                int m = l + (h - l) / 2;
                if (nums[m] == key) {
                    return m;
                } else if (nums[m] > key) {
                    h = m - 1;
                } else {
                    l = m + 1;
                }
            }
            return -1;
        }
        
    ###### 计算mid的方式之所以不用(l+r)/2是因为容易加法溢出。同样的原因在求sqrt(x)那到题目中也有体现：不求乘积而是转化成除法。
###### 2. 求开方（变形）leetcode 69
        Input: 4
    Output: 2

    Input: 8
    Output: 2
    Explanation: The square root of 8 is 2.82842..., and since we want to return an integer, the decimal part will be truncated.
    这里为了避免溢出，不能求mid*mid,而是用一个变量sqrt=target/mid;
   
       class Solution {
        public int mySqrt(int x) {
            if(x<=1) //注意特殊情况
                return x;
            int l = 0, r = x;
            while(l <= r){
                int mid = l + (r - l)/2;
                int sqrt = x/mid;
                if(mid == sqrt)
                    return mid;
                else if(mid < sqrt)
                    l = mid + 1;
                else
                    r = mid - 1;
            }
            return r;//这里返回的是右边界，因为跳出循环时r<l, 而这里开方向下取整
        }
    }
    
  ###### 3. 大于指定元素的最小元素 leetcode744
      Input: 4
    Output: 2

    Input: 8
    Output: 2
    Explanation: The square root of 8 is 2.82842..., and since we want to return an integer, the decimal part will be truncated.
   
  这道题不是找相同元素，而是比目标大的找最小元素。所以先用二分法找，跳出循环时如果找到（l此时在index之内），就返回l元素（比目标大）。否则，
  说明不存在比目标大的，就返回首元素。
  
      class Solution {
        public char nextGreatestLetter(char[] letters, char target) {
            int l=0, r=letters.length-1;
            while(l<=r){
                int mid = l + (r-l)/2;
                if(letters[mid]<=target)
                    l = mid+1;
                else
                    r = mid-1;
            }
            return l<letters.length? letters[l]:letters[0];
        }
    }
   
  ###### 4. 有序数组找single num leetcode 540
  Given a sorted array consisting of only integers where every element appears 
  twice except for one element which appears once. Find this single element that appears only once.
  Note: Your solution should run in O(log n) time and O(1) space.
  Input: [1,1,2,3,3,4,4,8,8]
  Output: 2
  所有single都会出现在第奇数个数字，也就是第偶数个index。求mid之后如果是奇数就减一，这样也可以避免mid+1溢出。
  重点在于缩小搜索范围就要定位single数字在mid左边还是右边。
  第一种mid和右边数字相等，说明直到mid+1，前面的数字都两两成对。那么将左边界指向mid+2.
  否则说明mid左边会出现single(包括mid本身)。将右边界设为mid.
  
        class Solution {
          public int singleNonDuplicate(int[] nums) {
              int l=0, r=nums.length-1;
              while(l<r){//注意最后跳出循环时候l=r
                  int mid = l+(r-l)/2;
                  if(mid%2 == 1)
                      mid--;
                  if(nums[mid] == nums[mid+1])
                      l = mid+2;
                  else
                      r = mid;
              }
              return nums[l];
          }
      }

###### 5. 278. First Bad Version (Easy)
  题目描述：给定一个元素 n 代表有 [1, 2, ..., n] 版本，可以调用 isBadVersion(int x) 知道某个版本是否错误，要求找到第一个错误的版本。
  如果第 m 个版本出错，则表示第一个错误的版本在 [l, m] 之间，令 h = m；否则第一个错误的版本在 [m + 1, h] 之间，令 l = m + 1。
  因为 h 的赋值表达式为 h = m，因此循环条件为 l < h。
  
      public int firstBadVersion(int n) {
        int l = 1, h = n;
        while (l < h) {
            int mid = l + (h - l) / 2;
            if (isBadVersion(mid)) {
                h = mid;
            } else {
                l = mid + 1;
            }
        }
        return l;
    }
    
 ###### 6. 153. Find Minimum in Rotated Sorted Array
 Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e.,  [0,1,2,4,5,6,7] might become  [4,5,6,7,0,1,2]).

Find the minimum element.

You may assume no duplicate exists in the array.
分析：最小值肯定出现在非递增序列里面（eg. 7,0,1）.如果mid比右边界大，那么mid就不是最小的，左边界从mid+1开始。
否则说明mid右边是递增的，最小值在[l,mid]之间。

        Input: [3,4,5,1,2] 
        Output: 1

        class Solution {
        public int findMin(int[] nums) {
            int l=0, r=nums.length-1;
            while(l<r){
                int mid = l + (r-l)/2;
                if(nums[mid]>=nums[r])
                    l = mid+1;
                else 
                    r = mid;
            }
            return nums[r];
        }
    }
    
  ###### 7. 34. Search for a Range (Medium)
    Input: nums = [5,7,7,8,8,10], target = 8
    Output: [3,4]

    Input: nums = [5,7,7,8,8,10], target = 6
    Output: [-1,-1]
    这道题需要搜索某个数出现的区间（头和尾），一开始我没想到，其实这个区间的长度可能是【1，n】,不单单是2.
    还有如果nums==null或者长度是零，就找不到
    接着就需要考虑如何找到头尾位置了。这两个可以分开来操作：
    - 首先搜索头，
        1. 如果nums[mid]<target, l = mid+1
        2. 如果nums[mid]>target, r = mid-1 
        3. 因为找头位置，也就是遇到mid等于target就往左边搜索，r=mid
        2/3都是往左搜索，可以合并。
        2* 如果nums[mid]>=target, r=mid
     - 搜索尾：
        1. 如果nums[mid]>target, r=mid-1
        2. 如果nums[mid]<target, l=mid+1
        3. 找尾所以遇到mid==target就往右搜索，l=mid
        2/3都是往右，合并
        2* 如果nums[mid]>=target, l=mid
        但是这里可能会陷入死循环，因为mid每次向左偏，如果mid==target之后l=mid,然后下一轮mid还是等于l,这样就卡住了。
        但是向左搜索不会出现因为每次j=mid，而mid本来不会等于j
        这里有一个小技巧就是将mid=l+(r-l)/2+1,右偏一下。
        
            public int[] searchRange(int[] nums, int target) {

            int[] res = new int[]{-1,-1};
            if(nums==null || nums.length==0)
                return res;
            int l=0, r=nums.length-1;
            while(l<r){
                int mid = l + (r-l)/2;
                if(nums[mid]<target)
                    l = mid+1;
                else 
                    r = mid;
            }
            if(nums[l]==target)
                res[0] = l;
            else
                return res;
            r = nums.length-1;
            while(l<r){
                int mid = l + (r-l)/2 +1; //小技巧
                if(nums[mid]>target)
                    r = mid-1;
                else
                    l=mid;
            }
            res[1] = r;
            return res;
        }
        
该方法原创来自讨论区高赞，https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/discuss/14699/Clean-iterative-solution-with-two-binary-searches-(with-explanation)

        
    
